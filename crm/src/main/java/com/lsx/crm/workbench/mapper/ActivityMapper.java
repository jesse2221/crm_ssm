package com.lsx.crm.workbench.mapper;

import com.lsx.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Mar 14 10:53:51 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件查询所有的活动列表
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询符合条件的所有条数
     */
    int queryCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id删除符合条件的
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     */
    Activity selectActivityById(String id);

    /**
     * 市场活动修改功能
     */
    int updateActivity(Activity activity);

    /**
     * 导出所有市场活动
     */
    List<Activity> selectAllActivitys();

    /**
     * 选择导出
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 批量保存创建的市场活动
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 查看市场活动详细信息
     */
    Activity selectActivityForDetailById(String Id);

    /**
     * 根据clueId查询该线索相关联的市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);


    /**
     * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除掉
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据ids查询市场活动的明确信息
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据name模糊查询市场活动，并且查询那些跟clueId关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);
}